import logging
import time
import base64
import hmac
import hashlib
import struct
import asyncio
import json
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "token"
ACCOUNTS_FILE = "accounts.txt"

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_accounts(filename=ACCOUNTS_FILE) -> dict:
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logging.warning(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
        return {}

USER_ACCOUNTS = load_user_accounts()

# üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Steam Guard –∫–æ–¥–∞
def get_steam_guard_code(shared_secret: str) -> str:
    timestamp = int(time.time())
    shared_secret_bytes = base64.b64decode(shared_secret)
    time_buffer = struct.pack(">Q", int(timestamp / 30))
    hmac_sha1 = hmac.new(shared_secret_bytes, time_buffer, hashlib.sha1).digest()
    start = hmac_sha1[19] & 0x0F
    full_code = struct.unpack(">I", hmac_sha1[start:start + 4])[0] & 0x7FFFFFFF

    chars = '23456789BCDFGHJKMNPQRTVWXY'
    code = ''
    for _ in range(5):
        code += chars[full_code % len(chars)]
        full_code //= len(chars)

    return code

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def get_user_accounts(user_id: int):
    return USER_ACCOUNTS.get(str(user_id), [])

# üì§ –ö–æ–º–∞–Ω–¥–∞ /guard
async def guard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    accounts = get_user_accounts(user_id)

    if not accounts:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã.")
        return

    response = "üîê Steam Guard –∫–æ–¥—ã:\n\n"
    for acc in accounts:
        try:
            code = get_steam_guard_code(acc["shared_secret"])
            response += f"üìõ *{acc['name']}*: `{code}`\n"
        except Exception as e:
            response += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è *{acc['name']}*\n"

    await update.message.reply_text(response, parse_mode="Markdown")

# üìò –ö–æ–º–∞–Ω–¥–∞ /help
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/guard ‚Äì –ü–æ–ª—É—á–∏—Ç—å Steam Guard –∫–æ–¥—ã\n"
        "/help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Steam Guard –∫–æ–¥–æ–≤.\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("guard", guard_handler))
    app.add_handler(CommandHandler("help", help_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    return app.run_polling()


if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except RuntimeError as e:
        if str(e).startswith("Cannot close a running event loop"):
            loop = asyncio.get_event_loop()
            loop.create_task(run_bot())
            loop.run_forever()
        else:
            raise
